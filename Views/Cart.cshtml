@{
    ViewData["Title"] = "Shopping Cart";
}

<div class="cart-page-wrapper py-5">
    <div class="container">
        <div class="d-flex align-items-center justify-content-between mb-4">
            <h2 class="mb-0">
                <i class="bi bi-cart3 me-2"></i>Shopping Cart
            </h2>
            <a href="/" class="btn btn-outline-primary">
                <i class="bi bi-arrow-left me-2"></i>Continue Shopping
            </a>
        </div>

        <div id="cartContainer" class="fade-in">
            <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="text-muted mt-2">Loading your cart...</p>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .cart-page-wrapper {
            background-color: #f8f9fa;
            min-height: 70vh;
        }

        .fade-in {
            animation: fadeIn 0.3s ease-out;
        }

        @@keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .cart-item {
            background: #fff;
            border-radius: 1rem;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .cart-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 .5rem 1rem rgba(0,0,0,.1);
        }

        .cart-book-img {
            width: 120px;
            height: 160px;
            object-fit: cover;
            border-radius: 0.5rem;
            box-shadow: 0 .5rem 1rem rgba(0,0,0,.1);
            transition: transform 0.3s ease;
        }

        .cart-item:hover .cart-book-img {
            transform: scale(1.05);
        }

        .quantity-control {
            display: inline-flex;
            align-items: center;
            background: #f8f9fa;
            border-radius: 2rem;
            padding: 0.25rem;
        }

        .quantity-btn {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            transition: all 0.2s ease;
        }

        .quantity-btn:hover:not(:disabled) {
            background: #e9ecef;
        }

        .quantity-badge {
            min-width: 40px;
            text-align: center;
            font-weight: 500;
        }

        .remove-btn {
            border: none;
            background: none;
            color: #dc3545;
            transition: all 0.2s ease;
            padding: 0.5rem;
            border-radius: 50%;
        }

        .remove-btn:hover {
            background: #dc354520;
            color: #dc3545;
        }

        .cart-summary {
            background: white;
            border-radius: 1rem;
            box-shadow: 0 .5rem 1rem rgba(0,0,0,.05);
        }

        .price-tag {
            font-family: 'Roboto Mono', monospace;
        }

        .sale-badge {
            position: absolute;
            top: 1rem;
            right: 1rem;
            transform: rotate(5deg);
        }

        .checkout-btn {
            transition: all 0.3s ease;
        }

        .checkout-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 .5rem 1rem rgba(0,0,0,.1);
        }

        .empty-cart {
            text-align: center;
            padding: 3rem;
        }

        .empty-cart i {
            font-size: 4rem;
            color: #dee2e6;
            margin-bottom: 1rem;
        }
    </style>
}

@section Scripts {
<script>
async function loadCart() {
    const container = document.getElementById('cartContainer');
    container.innerHTML = `
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="text-muted mt-2">Loading your cart...</p>
        </div>
    `;

    try {
        const res = await fetch('/api/cart', {credentials:'same-origin'});
        if (!res.ok) throw new Error('Not logged in or error fetching cart.');
        const data = await res.json();
        const items = (data.Items && data.Items.$values) ? data.Items.$values : (data.Items || []);
        const hasFivePlusDiscount = data.HasFivePlusDiscount;
        const totalBooks = data.TotalBooks;

        if (!items.length) {
            container.innerHTML = `
                <div class="empty-cart">
                    <i class="bi bi-cart-x display-1 text-muted mb-4"></i>
                    <h3 class="mb-3">Your cart is empty</h3>
                    <p class="text-muted mb-4">Looks like you haven't added any books yet.</p>
                    
                    </a>
                </div>
            `;
            return;
        }

        let subtotal = 0;
        let saleSavings = 0;
        let html = '<div class="row">';
        
        // Cart items column
        html += '<div class="col-lg-8 mb-4">';
        html += '<div class="cart-list d-flex flex-column gap-3">';
        
        for (const item of items) {
            const book = item.Book || {};
            const img = book.ImageUrl ? `<img src="${book.ImageUrl}" alt="${book.Title}" class="cart-book-img">` : '';
            const price = book.Price ? book.Price : 0;
            const discountedPrice = (book.DiscountedPrice !== undefined && book.DiscountedPrice !== null) ? book.DiscountedPrice : price;
            subtotal += discountedPrice * item.Quantity;
            saleSavings += (price - discountedPrice) * item.Quantity > 0 ? (price - discountedPrice) * item.Quantity : 0;

            html += `
                <div class="cart-item p-3">
                    <div class="row align-items-center">
                        <div class="col-auto">
                            ${img}
                        </div>
                        <div class="col">
                            <h5 class="mb-1">${book.Title || 'Book #' + item.BookID}</h5>
                            <p class="text-muted mb-2">
                                <i class="bi bi-person-circle me-1"></i>${book.AuthorNames || ''}
                            </p>
                            <div class="d-flex flex-wrap gap-3 align-items-center">
                                <div class="quantity-control">
                                    <button class="btn quantity-btn" onclick="updateCartQuantity(${item.BookID}, ${item.Quantity - 1})" ${item.Quantity <= 1 ? 'disabled' : ''}>
                                        <i class="bi bi-dash"></i>
                                    </button>
                                    <span class="quantity-badge mx-2">${item.Quantity}</span>
                                    <button class="btn quantity-btn" onclick="updateCartQuantity(${item.BookID}, ${item.Quantity + 1})">
                                        <i class="bi bi-plus"></i>
                                    </button>
                                </div>
                                <div class="price-tag">
                                    ${book.Discount && book.DiscountedPrice !== null ? `
                                        <span class="text-muted text-decoration-line-through me-2">$${price.toFixed(2)}</span>
                                        <span class="text-success fw-bold">₹${book.DiscountedPrice.toFixed(2)}</span>
                                    ` : `<span class="fw-bold">₹${price.toFixed(2)}</span>`}
                                </div>
                            </div>
                        </div>
                        <div class="col-auto">
                            <button class="remove-btn" onclick="removeFromCart(${item.BookID})" title="Remove item">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                    ${book.Discount && book.DiscountedPrice !== null ? `
                        <div class="sale-badge">
                            <span class="badge bg-danger">
                                ${book.Discount.DiscountType === 0 ? book.Discount.DiscountValue + '% OFF' : '$' + book.Discount.DiscountValue + ' OFF'}
                            </span>
                        </div>
                    ` : ''}
                </div>
            `;
        }
        
        html += '</div></div>';

        // Summary column
        html += '<div class="col-lg-4">';
        html += '<div class="cart-summary p-4 sticky-top" style="top: 2rem;">';
        html += '<h4 class="mb-4">Order Summary</h4>';

        // Discount calculations
        let fiveDiscount = hasFivePlusDiscount ? subtotal * 0.05 : 0;
        let loyaltyDiscount = 0; // If you have a flag, set to subtotal * 0.10
        let totalDiscount = fiveDiscount + loyaltyDiscount;
        let finalTotal = subtotal - totalDiscount;

        // Summary details
        html += `
            <div class="summary-item d-flex justify-content-between mb-3">
                <span class="text-muted">Subtotal</span>
                <span class="price-tag">₹${subtotal.toFixed(2)}</span>
            </div>
        `;

        if (saleSavings > 0) {
            html += `
                <div class="summary-item d-flex justify-content-between mb-3">
                    <span class="text-info">
                        <i class="bi bi-tag-fill me-1"></i>Sale Savings
                    </span>
                    <span class="price-tag text-info">-₹${saleSavings.toFixed(2)}</span>
                </div>
            `;
        }

        if (fiveDiscount > 0) {
            html += `
                <div class="summary-item d-flex justify-content-between mb-3">
                    <span class="text-success">
                        <i class="bi bi-percent me-1"></i>5% Bulk Discount
                    </span>
                    <span class="price-tag text-success">-₹${fiveDiscount.toFixed(2)}</span>
                </div>
            `;
        }

        if (loyaltyDiscount > 0) {
            html += `
                <div class="summary-item d-flex justify-content-between mb-3">
                    <span class="text-success">
                        <i class="bi bi-star-fill me-1"></i>Loyalty Discount
                    </span>
                    <span class="price-tag text-success">-₹${loyaltyDiscount.toFixed(2)}</span>
                </div>
            `;
        }

        html += `
            <hr>
            <div class="summary-item d-flex justify-content-between align-items-center mb-4">
                <span class="fw-bold">Total</span>
                <span class="price-tag fs-4 text-success fw-bold">₹${finalTotal.toFixed(2)}</span>
            </div>
            <button class="btn btn-primary btn-lg w-100 checkout-btn" onclick="placeOrder()">
                <i class="bi bi-credit-card me-2"></i>Proceed to Checkout
            </button>
        `;

        html += '</div></div></div>';
        container.innerHTML = html;

    } catch (e) {
        container.innerHTML = `
            <div class="alert alert-danger d-flex align-items-center" role="alert">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                <div>Failed to load cart: ${e.message}</div>
            </div>
        `;
    }
}

async function removeFromCart(bookId) {
    if (!confirm('Are you sure you want to remove this item from your cart?')) return;
    
    try {
        const res = await fetch(`/api/cart/${bookId}`, {
            method: 'DELETE',
            credentials: 'same-origin'
        });
        
        if (!res.ok) throw new Error('Failed to remove item');
        
        // Show success toast
        const toast = document.createElement('div');
        toast.className = 'position-fixed bottom-0 end-0 p-3';
        toast.style.zIndex = '5';
        toast.innerHTML = `
            <div class="toast show" role="alert">
                <div class="toast-header bg-success text-white">
                    <i class="bi bi-check-circle me-2"></i>
                    <strong class="me-auto">Success</strong>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
                </div>
                <div class="toast-body">
                    Item removed from cart successfully.
                </div>
            </div>
        `;
        document.body.appendChild(toast);
        setTimeout(() => toast.remove(), 3000);
        
        await loadCart();
    } catch (error) {
        alert('Failed to remove item: ' + error.message);
    }
}

async function updateCartQuantity(bookId, newQty) {
    if (newQty < 1) return;
    
    const container = document.getElementById('cartContainer');
    container.innerHTML = `
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Updating cart...</span>
            </div>
            <p class="text-muted mt-2">Updating your cart...</p>
        </div>
    `;

    try {
        const res = await fetch('/api/cart', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'same-origin',
            body: JSON.stringify({ BookID: bookId, Quantity: newQty })
        });

        if (!res.ok) throw new Error('Failed to update cart');
        await loadCart();

    } catch (error) {
        container.innerHTML = `
            <div class="alert alert-danger d-flex align-items-center" role="alert">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                <div>${error.message}</div>
            </div>
        `;
    }
}

async function placeOrder() {
    const container = document.getElementById('cartContainer');
    container.innerHTML = `
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Processing order...</span>
            </div>
            <p class="text-muted mt-2">Processing your order...</p>
        </div>
    `;

    try {
        // Get cart items for order
        const resCart = await fetch('/api/cart', {credentials:'same-origin'});
        if (!resCart.ok) throw new Error('Could not load cart');
        
        const data = await resCart.json();
        const items = (data.Items && data.Items.$values) ? data.Items.$values : (data.Items || []);
        
        if (!items.length) {
            container.innerHTML = `
                <div class="empty-cart">
                    <i class="bi bi-cart-x display-1 text-muted mb-4"></i>
                    <h3 class="mb-3">Your cart is empty</h3>
                    <p class="text-muted mb-4">Looks like you haven't added any books yet.</p>
                    <a href="/" class="btn btn-primary btn-lg">
                        <i class="bi bi-book-half me-2"></i>Browse Books
                    </a>
                </div>
            `;
            return;
        }

        // Prepare order object
        const order = {
            OrderItems: items.map(item => ({
                BookID: item.BookID,
                Quantity: item.Quantity,
                UnitPrice: item.Book.Price
            }))
        };

        const res = await fetch('/api/order', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'same-origin',
            body: JSON.stringify(order)
        });

        if (!res.ok) {
            const err = await res.text();
            throw new Error('Order failed: ' + err);
        }

        const result = await res.json();
        await loadCart();

        // Show success modal
        const modal = document.createElement('div');
        modal.innerHTML = `
            <div class="modal fade" id="orderSuccessModal" tabindex="-1">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header bg-success text-white">
                            <h5 class="modal-title">
                                <i class="bi bi-check-circle me-2"></i>Order Placed Successfully!
                            </h5>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body text-center py-4">
                            <h4 class="mb-3">Thank you for your order!</h4>
                            <p class="mb-1">Your claim code is:</p>
                            <div class="bg-light p-3 rounded mb-3">
                                <code class="fs-4">${result.claimCode}</code>
                            </div>
                            <p class="text-muted small">A confirmation email has been sent to your registered email address.</p>
                        </div>
                        <div class="modal-footer">
                            <a href="/Orders" class="btn btn-primary">
                                <i class="bi bi-bag me-2"></i>View Orders
                            </a>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        document.body.appendChild(modal);
        const successModal = new bootstrap.Modal(document.getElementById('orderSuccessModal'));
        successModal.show();
        
    } catch (error) {
        container.innerHTML = `
            <div class="alert alert-danger d-flex align-items-center" role="alert">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                <div>${error.message}</div>
            </div>
        `;
    }
}

window.onload = loadCart;
</script>
}

