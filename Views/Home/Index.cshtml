@{
    ViewData["Title"] = "Book Catalog";
}

<link rel="stylesheet" href="~/css/animations.css" />

@* Add user authentication script *@
@if (User.Identity.IsAuthenticated)
{
    <script>
        window.currentUserId = "@User.FindFirst("sub")?.Value" || "@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value";
        window.currentUserName = "@User.Identity.Name";
    </script>
}
else
{
    <script>
        window.currentUserId = null;
        window.currentUserName = null;
    </script>
}

<div class="container-fluid px-4 py-5">
    @if (User.Identity.IsAuthenticated)
    {
        <div class="welcome-banner mb-4 bg-primary bg-gradient text-white rounded-3 p-4 shadow-sm">
            <div class="d-flex align-items-center">
                <i class="bi bi-person-circle fs-1 me-3"></i>
                <div>
                    <h4 class="mb-0">Welcome back, @User.Identity.Name!</h4>
                    <p class="mb-0 opacity-75">Discover your next favorite book today.</p>
                </div>
            </div>
        </div>
    }

    <!-- Announcements Section -->
    <div id="announcementsSection" class="mb-4">
        <!-- Active announcements will be displayed here -->
    </div>

    <div class="row">
        <!-- Sidebar Filters -->
        <div class="col-md-3">
            <div class="sticky-top" style="top: 20px;">
                <form id="filterForm" class="card shadow-sm border-0 rounded-3 p-3 mb-3">
                    <h5 class="card-title mb-3"><i class="bi bi-funnel me-2"></i>Filters</h5>
                    
                    <div class="search-box mb-3">
                        <div class="input-group">
                            <span class="input-group-text bg-white border-end-0">
                                <i class="bi bi-search text-muted"></i>
                            </span>
                            <input type="text" class="form-control border-start-0 ps-0" id="searchInput" 
                                   placeholder="Search books...">
                        </div>
                    </div>

                    <div class="accordion" id="filterAccordion">
                        <div class="accordion-item border-0 mb-2">
                            <h2 class="accordion-header">
                                <button class="accordion-button p-2" type="button" data-bs-toggle="collapse" data-bs-target="#basicFilters">
                                    Basic Filters
                                </button>
                            </h2>
                            <div id="basicFilters" class="accordion-collapse collapse show">
                                <div class="accordion-body p-2">
                                    <div class="mb-3">
                                        <label class="form-label small text-muted">Author</label>
                                        <select class="form-select form-select-sm" id="authorFilter">
                                            <option value="">All Authors</option>
                                        </select>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label small text-muted">Genre</label>
                                        <select class="form-select form-select-sm" id="genreFilter">
                                            <option value="">All Genres</option>
                                        </select>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label small text-muted">Availability</label>
                                        <select class="form-select form-select-sm" id="availabilityFilter">
                                            <option value="">All</option>
                                            <option value="inStock">In Stock</option>
                                            <option value="library">Library Access</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="accordion-item border-0 mb-2">
                            <h2 class="accordion-header">
                                <button class="accordion-button collapsed p-2" type="button" data-bs-toggle="collapse" data-bs-target="#advancedFilters">
                                    Advanced Filters
                                </button>
                            </h2>
                            <div id="advancedFilters" class="accordion-collapse collapse">
                                <div class="accordion-body p-2">
                                    <div class="mb-3">
                                        <label class="form-label small text-muted">Price Range</label>
                                        <div class="d-flex gap-2">
                                            <div class="input-group input-group-sm">
                                                <span class="input-group-text">₹</span>
                                                <input type="number" class="form-control" id="minPrice" placeholder="Min">
                                            </div>
                                            <div class="input-group input-group-sm">
                                                <span class="input-group-text">₹</span>
                                                <input type="number" class="form-control" id="maxPrice" placeholder="Max">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label small text-muted">Rating</label>
                                        <select class="form-select form-select-sm" id="ratingFilter">
                                            <option value="">Any Rating</option>
                                            <option value="5">5 Stars</option>
                                            <option value="4">4+ Stars</option>
                                            <option value="3">3+ Stars</option>
                                            <option value="2">2+ Stars</option>
                                            <option value="1">1+ Star</option>
                                        </select>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label small text-muted">Language</label>
                                        <select class="form-select form-select-sm" id="languageFilter">
                                            <option value="">All Languages</option>
                                        </select>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label small text-muted">Format</label>
                                        <select class="form-select form-select-sm" id="formatFilter">
                                            <option value="">All Formats</option>
                                        </select>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label small text-muted">Publisher</label>
                                        <select class="form-select form-select-sm" id="publisherFilter">
                                            <option value="">All Publishers</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <button type="submit" class="btn btn-primary w-100">
                        <i class="bi bi-funnel-fill me-2"></i>Apply Filters
                    </button>
                </form>
            </div>
        </div>

        <!-- Main Content -->
        <div class="col-md-9">
            <div class="card border-0 shadow-sm rounded-3 mb-4">
                <div class="card-body p-0">
                    <!-- Tabs -->
                    <ul class="nav nav-tabs nav-fill border-0" id="catalogTabs">
                        <li class="nav-item">
                            <a class="nav-link active px-4 py-3 border-0" data-tab="all" href="#">
                                <i class="bi bi-grid-3x3-gap me-2"></i>All Books
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link px-4 py-3 border-0" data-tab="bestsellers" href="#">
                                <i class="bi bi-star me-2"></i>Bestsellers
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link px-4 py-3 border-0" data-tab="award" href="#">
                                <i class="bi bi-trophy me-2"></i>Award Winners
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link px-4 py-3 border-0" data-tab="newreleases" href="#">
                                <i class="bi bi-calendar-check me-2"></i>New Releases
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link px-4 py-3 border-0" data-tab="deals" href="#">
                                <i class="bi bi-tag me-2"></i>Deals
                            </a>
                        </li>
                    </ul>
                </div>
            </div>

            <!-- Sort Options -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div class="results-info text-muted small">
                    <i class="bi bi-info-circle me-2"></i>Showing all available books
                </div>
                <div class="d-flex align-items-center">
                    <label for="sortSelect" class="text-muted small me-2">Sort by:</label>
                    <select id="sortSelect" class="form-select form-select-sm" style="width: auto;">
                        <option value="title">Title (A-Z)</option>
                        <option value="date">Newest First</option>
                        <option value="price">Price (Low to High)</option>
                        <option value="popularity">Most Popular</option>
                    </select>
                </div>
            </div>

            <!-- Book Grid -->
            <div id="catalogBooks" class="row g-4"></div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        /* Custom Styles */
        .nav-tabs .nav-link {
            color: #6c757d;
            transition: all 0.3s ease;
            position: relative;
        }

        .nav-tabs .nav-link:hover {
            color: #0d6efd;
            background-color: #f8f9fa;
        }

        .nav-tabs .nav-link.active {
            color: #0d6efd;
            background-color: #fff;
        }

        .nav-tabs .nav-link.active::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 2px;
            background-color: #0d6efd;
        }

        .card {
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;
        }

        .bookmark-btn {
            opacity: 0.7;
            transition: all 0.3s ease;
        }

        .bookmark-btn:hover {
            opacity: 1;
            transform: scale(1.1);
        }

        .bookmark-btn.active {
            opacity: 1;
        }

        .book-card-img {
            height: 250px;
            object-fit: contain;
            background-color: #f8f9fa;
            padding: 1rem;
            transition: transform 0.3s ease;
        }

        .book-card-img:hover {
            transform: scale(1.05);
        }

        .price-tag {
            font-size: 1.25rem;
            font-weight: 600;
            color: #198754;
        }

        .sale-badge {
            position: absolute;
            top: 1rem;
            left: 1rem;
            z-index: 2;
            transform: rotate(-10deg);
        }

        .accordion-button:not(.collapsed) {
            background-color: #f8f9fa;
            color: #0d6efd;
        }

        .accordion-button:focus {
            box-shadow: none;
        }

        .form-select:focus, .form-control:focus {
            border-color: #86b7fe;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.1);
        }

        .book-card {
            animation: fadeInUp 0.5s ease forwards;
        }

        #bookmarkToast {
            animation: slideIn 0.3s ease forwards;
        }

        @@keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @@keyframes slideIn {
            from { transform: translateX(100%); }
            to { transform: translateX(0); }
        }
    </style>
}

@section Scripts {
<script>
async function loadFilterOptions() {
    // Populate author, genre, language, format, publisher filters
    const [authors, genres, publishers, books] = await Promise.all([
        fetch('/api/author').then(r=>r.json()),
        fetch('/api/genre').then(r=>r.json()),
        fetch('/api/publisher').then(r=>r.json()),
        fetch('/api/book').then(r=>r.json())
    ]);
    const fillOptions = (sel, arr, id, label) => {
        sel.innerHTML = '<option value="">All</option>' + (arr.$values||arr).map(x=>`<option value="${x[id]}">${x[label]}</option>`).join('');
    };
    fillOptions(document.getElementById('authorFilter'), authors, 'AuthorID', 'Name');
    fillOptions(document.getElementById('genreFilter'), genres, 'GenreID', 'Name');
    fillOptions(document.getElementById('publisherFilter'), publishers, 'PublisherID', 'Name');
    // Language and Format from books
    const langs = [...new Set((books.$values||books).map(b=>b.Language).filter(Boolean))];
    document.getElementById('languageFilter').innerHTML = '<option value="">All</option>' + langs.map(l=>`<option value="${l}">${l}</option>`).join('');
    const formats = [...new Set((books.$values||books).map(b=>b.Format).filter(Boolean))];
    document.getElementById('formatFilter').innerHTML = '<option value="">All</option>' + formats.map(f=>`<option value="${f}">${f}</option>`).join('');
}
let currentTab = 'all';
async function loadCatalogBooks() {
    const params = new URLSearchParams();
    if(currentTab && currentTab !== 'all') params.append('tab', currentTab);
    const q = document.getElementById('searchInput').value;
    if(q) params.append('q', q);
    const author = document.getElementById('authorFilter').value;
    if(author) params.append('author', author);
    const genre = document.getElementById('genreFilter').value;
    if(genre) params.append('genre', genre);
    const avail = document.getElementById('availabilityFilter').value;
    if(avail) params.append('availability', avail);
    const minPrice = document.getElementById('minPrice').value;
    if(minPrice) params.append('minPrice', minPrice);
    const maxPrice = document.getElementById('maxPrice').value;
    if(maxPrice) params.append('maxPrice', maxPrice);
    const rating = document.getElementById('ratingFilter').value;
    if(rating) params.append('rating', rating);
    const lang = document.getElementById('languageFilter').value;
    if(lang) params.append('language', lang);
    const format = document.getElementById('formatFilter').value;
    if(format) params.append('format', format);
    const publisher = document.getElementById('publisherFilter').value;
    if(publisher) params.append('publisher', publisher);
    const sort = document.getElementById('sortSelect')?.value;
    if(sort) params.append('sort', sort);
    const res = await fetch('/api/book?' + params.toString());
    const books = await res.json();
    const container = document.getElementById('catalogBooks');
    container.innerHTML = '';
    (Array.isArray(books) ? books : (books.$values || [])).forEach(book => {
        const card = document.createElement('div');
        card.className = 'col-md-4';
        card.innerHTML = `
            <div class="card h-100 border-0 shadow-sm book-card">
                ${book.DiscountedPrice ? `
                    <div class="sale-badge position-absolute top-0 start-0 m-3">
                        <span class="badge bg-danger">
                            ${Math.round((1 - book.DiscountedPrice/book.Price) * 100)}% OFF
                        </span>
                    </div>
                ` : ''}
                <img src="${book.ImageUrl||'/images/book-placeholder.png'}" 
                     class="card-img-top book-card-img p-3" 
                     alt="${book.Title}">
                <button type="button" 
                        class="btn btn-light rounded-circle shadow-sm position-absolute top-0 end-0 m-3 bookmark-btn ${window.bookmarkedIds && window.bookmarkedIds.has(book.BookID) ? 'active' : ''}" 
                        data-bookid="${book.BookID}" 
                        title="${window.bookmarkedIds && window.bookmarkedIds.has(book.BookID) ? 'Remove from Bookmarks' : 'Add to Bookmarks'}">
                    <i class="bi ${window.bookmarkedIds && window.bookmarkedIds.has(book.BookID) ? 'bi-bookmark-check-fill text-primary' : 'bi-bookmark'} fs-5"></i>
                </button>
                <div class="card-body p-4">
                    <h5 class="card-title mb-1 text-truncate">${book.Title}</h5>
                    <p class="card-text text-muted mb-2 small">${book.AuthorNames||''}</p>
                    <p class="card-text mb-2">
                        <small class="text-muted">
                            <i class="bi bi-tags me-1"></i>${book.GenreNames||''}
                        </small>
                    </p>
                    <p class="card-text text-truncate small mb-3">${book.Description || ''}</p>
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <div>
                            ${book.DiscountedPrice ? `
                                <div class="d-flex align-items-center gap-2">
                                    <span class="price-tag text-danger fw-bold">₹${parseFloat(book.DiscountedPrice).toFixed(2)}</span>
                                    <small class="text-muted text-decoration-line-through">₹${parseFloat(book.Price).toFixed(2)}</small>
                                </div>
                                ${book.ActiveDiscounts && book.ActiveDiscounts.length > 0 ? `
                                    <small class="text-success">
                                        <i class="bi bi-tag-fill me-1"></i>
                                        ${book.ActiveDiscounts[0].DiscountType === 0 ? 
                                            `${book.ActiveDiscounts[0].DiscountValue}% off` : 
                                            `₹${parseFloat(book.ActiveDiscounts[0].DiscountedAmount).toFixed(2)} off`}
                                    </small>
                                ` : ''}
                            ` : `
                                <span class="price-tag">₹${parseFloat(book.Price).toFixed(2)}</span>
                            `}
                        </div>
                        <div class="d-flex gap-2">
                            ${book.StockQuantity > 0 ? 
                                '<span class="badge bg-success"><i class="bi bi-check-circle me-1"></i>In Stock</span>' : 
                                '<span class="badge bg-danger"><i class="bi bi-x-circle me-1"></i>Out of Stock</span>'}
                            ${book.InLibraryAccess ? 
                                '<span class="badge bg-info"><i class="bi bi-book me-1"></i>Library</span>' : ''}
                        </div>
                    </div>
                    <div class="d-flex gap-2">
                        <a href="/BookView/Details/${book.BookID}" 
                           class="btn btn-outline-primary btn-sm flex-fill">
                            <i class="bi bi-eye me-1"></i>View Details
                        </a>
                        <button type="button" 
                                class="btn btn-primary btn-sm flex-fill add-cart-btn" 
                                data-bookid="${book.BookID}" 
                                ${book.StockQuantity <= 0 ? 'disabled' : ''}>
                            <i class="bi bi-cart-plus me-1"></i>Add to Cart
                        </button>
                    </div>
                </div>
            </div>
        `;
        container.appendChild(card);
    });
}
document.getElementById('filterForm').addEventListener('submit', function(e){
    e.preventDefault();
    loadCatalogBooks();
});
document.getElementById('searchInput').addEventListener('keydown', function(e){
    if(e.key==='Enter'){
        e.preventDefault();
        loadCatalogBooks();
    }
});
document.getElementById('sortSelect').addEventListener('change', function() {
    loadCatalogBooks();
});
// Tabs logic
Array.from(document.querySelectorAll('#catalogTabs .nav-link')).forEach(tab => {
    tab.addEventListener('click', function(e) {
        e.preventDefault();
        Array.from(document.querySelectorAll('#catalogTabs .nav-link')).forEach(t=>t.classList.remove('active'));
        this.classList.add('active');
        currentTab = this.getAttribute('data-tab');
        loadCatalogBooks();
    });
});
window.bookmarkedIds = new Set();
async function loadBookmarks() {
    if (window.currentUserId) {
        try {
            const res = await fetch('/api/bookmark', {credentials: 'same-origin'});
            const books = await res.json();
            window.bookmarkedIds = new Set((books.$values||books).map(b=>b.bookID || b.BookID));
        } catch {}
    } else {
        window.bookmarkedIds = new Set();
    }
}
async function toggleBookmark(bookId, btn) {
    if (!window.currentUserId) { showToast('Please log in to bookmark books.', 'danger'); return; }
    const isBookmarked = window.bookmarkedIds.has(bookId);
    const url = `/api/bookmark/${isBookmarked ? 'remove' : 'add'}/${bookId}`;
    const method = isBookmarked ? 'DELETE' : 'POST';
    const res = await fetch(url, {method, credentials:'same-origin'});
    if (res.ok) {
        await loadBookmarks(); // Always reload from server to ensure state is correct
        await loadCatalogBooks(); // Re-render book cards with correct bookmark state
        // Animate heart icon
        if (btn && btn.querySelector('i')) {
            btn.querySelector('i').classList.add('scale-heart');
            setTimeout(()=>btn.querySelector('i').classList.remove('scale-heart'), 250);
        }
        showToast(isBookmarked ? 'Removed from bookmarks.' : 'Bookmarked!', isBookmarked ? 'secondary' : 'success');
    } else {
        showToast('Failed to update bookmark.', 'danger');
    }
}
document.addEventListener('click', function(e){
    if (e.target.closest('.bookmark-btn')) {
        const btn = e.target.closest('.bookmark-btn');
        const bookId = parseInt(btn.getAttribute('data-bookid'));
        toggleBookmark(bookId, btn);
    }
});
// Toast feedback for bookmark actions
function showToast(msg, type='success') {
    let toast = document.getElementById('bookmarkToast');
    if (!toast) {
        toast = document.createElement('div');
        toast.id = 'bookmarkToast';
        toast.style.position = 'fixed';
        toast.style.bottom = '32px';
        toast.style.right = '32px';
        toast.style.zIndex = '9999';
        toast.style.minWidth = '200px';
        toast.style.transition = 'opacity 0.3s';
        document.body.appendChild(toast);
    }
    toast.innerHTML = `<div class='alert alert-${type} shadow-sm mb-0 py-2 px-3 border-0'>${msg}</div>`;
    toast.style.opacity = 1;
    setTimeout(()=>{toast.style.opacity = 0;}, 1800);
}
// Heart animation CSS
const style = document.createElement('style');
style.textContent = `
.bookmark-btn:hover { background: #f0f8ff; box-shadow: 0 2px 8px rgba(0,123,255,0.10); }
.bookmark-btn:active { background: #e2e6ea; }
.bi-bookmark-check-fill { color: #0d6efd !important; }
`;
document.head.appendChild(style);

// Add announcement loading function
async function loadAnnouncements() {
    try {
        const res = await fetch('/api/announcement');
        const announcements = await res.json();
        const container = document.getElementById('announcementsSection');
        
        // Filter active announcements
        const now = new Date();
        const activeAnnouncements = (announcements.$values || announcements).filter(ann => {
            const startDate = new Date(ann.StartDate);
            const endDate = new Date(ann.EndDate);
            return startDate <= now && endDate >= now && 
                   (ann.DisplayLocation === 'Homepage' || ann.DisplayLocation === 'Banner');
        });

        if (activeAnnouncements.length === 0) {
            container.style.display = 'none';
            return;
        }

        container.style.display = 'block';
        container.innerHTML = `
            <div class="announcements-wrapper">
                ${activeAnnouncements.map(ann => `
                    <div class="announcement-card bg-light rounded-3 p-3 mb-3 shadow-sm border-start border-4 border-primary">
                        <div class="d-flex align-items-center mb-2">
                            <i class="bi bi-megaphone-fill text-primary me-2"></i>
                            <h5 class="mb-0">${ann.Title}</h5>
                        </div>
                        <p class="mb-2">${ann.Message}</p>
                        <small class="text-muted">
                            <i class="bi bi-calendar-event me-1"></i>
                            Posted: ${new Date(ann.StartDate).toLocaleDateString()}
                        </small>
                    </div>
                `).join('')}
            </div>
        `;
    } catch (error) {
        console.error('Failed to load announcements:', error);
    }
}

// Add announcement styles
const announcementStyles = document.createElement('style');
announcementStyles.textContent = `
    .announcement-card {
        transition: transform 0.2s ease;
    }
    .announcement-card:hover {
        transform: translateX(5px);
    }
    .announcements-wrapper {
        animation: fadeIn 0.5s ease;
    }
`;
document.head.appendChild(announcementStyles);

window.onload = async function(){
    await Promise.all([
        loadFilterOptions(),
        loadBookmarks(),
        loadCatalogBooks(),
        loadAnnouncements()  // Add announcements loading
    ]);
}

document.addEventListener('click', async function(e){
    if (e.target.closest('.add-cart-btn')) {
        const btn = e.target.closest('.add-cart-btn');
        const bookId = parseInt(btn.getAttribute('data-bookid'));

        btn.disabled = true;
        btn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Adding...';
        try {
            const res = await fetch('/api/cart', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                credentials: 'same-origin',
                body: JSON.stringify({ BookID: bookId, Quantity: 1 })
            });
            if (res.ok) {
                btn.innerHTML = '<i class="bi bi-cart-check"></i> Added!';
                setTimeout(()=>{btn.innerHTML='<i class="bi bi-cart-plus"></i> Add to Cart';btn.disabled=false;}, 1200);
            } else {
                alert('Failed to add to cart.');
                btn.innerHTML = '<i class="bi bi-cart-plus"></i> Add to Cart';
                btn.disabled = false;
            }
        } catch {
            alert('Error adding to cart.');
            btn.innerHTML = '<i class="bi bi-cart-plus"></i> Add to Cart';
            btn.disabled = false;
        }
    }
});
</script>
}

