@* Book Details Page *@
<!-- TODO: Implement book details page markup and logic here. -->

@model Book

@{
    ViewData["Title"] = Model.Title;

    // Helper methods
    string GetAuthorNames()
    {
        return Model.BookAuthors?.Select(ba => ba.Author.Name).Any() == true
            ? string.Join(", ", Model.BookAuthors.Select(ba => ba.Author.Name))
            : "Unknown Author";
    }

    string GetGenreNames()
    {
        return Model.BookGenres?.Select(bg => bg.Genre.Name).Any() == true
            ? string.Join(", ", Model.BookGenres.Select(bg => bg.Genre.Name))
            : "";
    }

    string GetPublisherName()
    {
        return Model.BookPublishers?.FirstOrDefault()?.Publisher.Name ?? "";
    }

    decimal? GetDiscountedPrice()
    {
        var activeDiscount = Model.Discounts?.FirstOrDefault(d => d.IsActive == true);
        if (activeDiscount == null) return null;
        
        return activeDiscount.DiscountType == 0 
            ? Model.Price - (Model.Price * activeDiscount.DiscountValue / 100) 
            : Model.Price - activeDiscount.DiscountValue;
    }
}

<div class="container mt-4">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/">Home</a></li>
            <li class="breadcrumb-item active" aria-current="page">@Model.Title</li>
        </ol>
    </nav>

    <div class="row">
        <!-- Book Image Column -->
        <div class="col-md-5">
            <div class="card border-0">
                <img src="@(Model.ImageUrl ?? "/images/book-placeholder.png")" 
                     class="img-fluid rounded" 
                     alt="@Model.Title"
                     style="max-height: 600px; object-fit: contain;">
            </div>
        </div>

        <!-- Book Details Column -->
        <div class="col-md-7">
            <h1 class="mb-3">@Model.Title</h1>
            
            <!-- Authors -->
            <p class="text-muted mb-3">
                By @GetAuthorNames()
            </p>

            <!-- Price Section -->
            <div class="mb-4">
                @{
                    var discountedPrice = GetDiscountedPrice();
                }
                @if (discountedPrice.HasValue && discountedPrice.Value < Model.Price)
                {
                    <h2 class="text-danger mb-0">Rs. @discountedPrice.Value.ToString("0.00")</h2>
                    <p class="text-muted">
                        <span class="text-decoration-line-through">Rs. @Model.Price.ToString("0.00")</span>
                        <span class="badge bg-success ms-2">
                            @(((Model.Price - discountedPrice.Value) / Model.Price * 100).ToString("0"))% OFF
                        </span>
                    </p>
                }
                else
                {
                    <h2 class="mb-0">Rs. @Model.Price.ToString("0.00")</h2>
                }
            </div>

            <!-- Availability Badges -->
            <div class="mb-4">
                @if (Model.StockQuantity > 0)
                {
                    <span class="badge bg-primary me-2">In Stock</span>
                }
                else
                {
                    <span class="badge bg-danger me-2">Out of Stock</span>
                }
                @if (Model.InLibraryAccess == true)
                {
                    <span class="badge bg-info">Library Access Available</span>
                }
            </div>

            <!-- Action Buttons -->
            <div class="d-flex gap-3 mb-4">
                <button type="button" 
                        class="btn btn-primary btn-lg flex-grow-1 add-cart-btn" 
                        data-bookid="@Model.BookID"
                        @(Model.StockQuantity <= 0 ? "disabled" : "")>
                    <i class="bi bi-cart-plus"></i> Add to Cart
                </button>
                <button type="button" 
                        class="btn btn-outline-primary btn-lg bookmark-btn" 
                        data-bookid="@Model.BookID"
                        title="@(ViewBag.IsBookmarked ? "Remove from Bookmarks" : "Add to Bookmarks")">
                    <i class="bi @(ViewBag.IsBookmarked ? "bi-bookmark-check-fill" : "bi-bookmark")"></i>
                </button>
            </div>

            <!-- Book Details -->
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="card-title mb-3">Book Details</h5>
                    <div class="row">
                        <div class="col-md-6">
                            <p><strong>ISBN:</strong> @Model.ISBN</p>
                            <p><strong>Language:</strong> @(Model.Language ?? "Not specified")</p>
                            <p><strong>Format:</strong> @(Model.Format ?? "Not specified")</p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Publisher:</strong> @GetPublisherName()</p>
                            <p><strong>Publication Date:</strong> @(Model.PublicationDate?.ToString("MMMM d, yyyy") ?? "Not specified")</p>
                            <p><strong>Genre:</strong> @GetGenreNames()</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Description -->
            <div class="mb-4">
                <h5>Description</h5>
                <p class="text-muted">@(Model.Description ?? "No description available.")</p>
            </div>
        </div>
    </div>

    <h3>Reviews</h3>
    @if (User.Identity.IsAuthenticated)
    {
        <div class="card mb-4" id="reviewForm">
            <div class="card-body">
                <h5 class="card-title">Write a Review</h5>
                <div class="mb-3">
                    <label class="form-label">Rating</label>
                    <div class="star-rating">
                        <i class="bi bi-star" data-rating="1"></i>
                        <i class="bi bi-star" data-rating="2"></i>
                        <i class="bi bi-star" data-rating="3"></i>
                        <i class="bi bi-star" data-rating="4"></i>
                        <i class="bi bi-star" data-rating="5"></i>
                    </div>
                    <input type="hidden" id="selectedRating" value="0">
                </div>
                <div class="mb-3">
                    <label for="reviewComment" class="form-label">Your Review</label>
                    <textarea class="form-control" id="reviewComment" rows="3" placeholder="Share your thoughts about this book..."></textarea>
                </div>
                <button class="btn btn-primary" onclick="submitReview()">Submit Review</button>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-info">
            Please <a href="/Account/Login">login</a> to write a review.
        </div>
    }

    <div id="reviewsList" class="mt-4">
        <!-- Reviews will be loaded here -->
    </div>
</div>

@section Styles {
    <style>
        .star-rating {
            color: #ffc107;
            font-size: 1.5rem;
            cursor: pointer;
        }
        .star-rating i {
            margin-right: 5px;
        }
        .star-rating i:hover,
        .star-rating i.active {
            color: #ffac07;
        }
        .review-card {
            border-bottom: 1px solid #dee2e6;
            padding: 1rem 0;
        }
        .review-card:last-child {
            border-bottom: none;
        }
        .review-actions {
            display: none;
        }
        .review-card:hover .review-actions {
            display: block;
        }
    </style>
}

@section Scripts {
    <script>
        // Star rating functionality
        const starRating = document.querySelector('.star-rating');
        const stars = starRating.querySelectorAll('i');
        const selectedRating = document.getElementById('selectedRating');

        function setRating(rating) {
            selectedRating.value = rating;
            stars.forEach((star, index) => {
                star.classList.remove('bi-star-fill', 'bi-star');
                if (index < rating) {
                    star.classList.add('bi-star-fill');
                } else {
                    star.classList.add('bi-star');
                }
            });
        }

        stars.forEach(star => {
            star.addEventListener('click', () => {
                const rating = parseInt(star.dataset.rating);
                setRating(rating);
            });

            star.addEventListener('mouseover', () => {
                const rating = parseInt(star.dataset.rating);
                stars.forEach((s, index) => {
                    s.classList.remove('bi-star-fill', 'bi-star');
                    if (index < rating) {
                        s.classList.add('bi-star-fill');
                    } else {
                        s.classList.add('bi-star');
                    }
                });
            });
        });

        starRating.addEventListener('mouseleave', () => {
            const rating = parseInt(selectedRating.value);
            setRating(rating);
        });

        // Load reviews
        async function loadReviews() {
            try {
                const response = await fetch(`/api/review/book/@Model.BookID`);
                const reviews = await response.json();
                const reviewsList = document.getElementById('reviewsList');
                
                reviewsList.innerHTML = reviews.map(review => `
                    <div class="review-card">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <h5 class="mb-1">${review.user.fullName}</h5>
                                <div class="text-warning mb-2">
                                    ${Array(5).fill(0).map((_, i) => 
                                        `<i class="bi bi-star${i < review.rating ? '-fill' : ''}"></i>`
                                    ).join('')}
                                </div>
                            </div>
                            ${review.canEdit ? `
                                <div class="review-actions">
                                    <button class="btn btn-sm btn-outline-primary me-2" onclick="editReview(${review.reviewID})">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" onclick="deleteReview(${review.reviewID})">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            ` : ''}
                        </div>
                        <p class="mb-1">${review.comment}</p>
                        <small class="text-muted">
                            ${new Date(review.createdAt).toLocaleDateString()}
                        </small>
                    </div>
                `).join('') || '<p class="text-muted">No reviews yet. Be the first to review!</p>';
            } catch (error) {
                console.error('Error loading reviews:', error);
            }
        }

        // Submit review
        async function submitReview() {
            const rating = parseInt(selectedRating.value);
            const comment = document.getElementById('reviewComment').value;

            if (rating === 0) {
                alert('Please select a rating');
                return;
            }

            if (!comment.trim()) {
                alert('Please write a review');
                return;
            }

            try {
                const response = await fetch('/api/review', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        bookID: @Model.BookID,
                        rating: rating,
                        comment: comment
                    })
                });

                if (response.ok) {
                    // Clear form
                    setRating(0);
                    document.getElementById('reviewComment').value = '';
                    // Reload reviews
                    await loadReviews();
                } else {
                    const error = await response.text();
                    alert(error);
                }
            } catch (error) {
                console.error('Error submitting review:', error);
                alert('Failed to submit review. Please try again.');
            }
        }

        // Edit review
        async function editReview(reviewId) {
            const response = await fetch(`/api/review/${reviewId}`);
            const review = await response.json();
            
            const newComment = prompt('Edit your review:', review.comment);
            if (newComment === null) return;

            try {
                await fetch(`/api/review/${reviewId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        reviewID: reviewId,
                        rating: review.rating,
                        comment: newComment
                    })
                });

                await loadReviews();
            } catch (error) {
                console.error('Error updating review:', error);
                alert('Failed to update review. Please try again.');
            }
        }

        // Delete review
        async function deleteReview(reviewId) {
            if (!confirm('Are you sure you want to delete this review?')) return;

            try {
                await fetch(`/api/review/${reviewId}`, {
                    method: 'DELETE'
                });

                await loadReviews();
            } catch (error) {
                console.error('Error deleting review:', error);
                alert('Failed to delete review. Please try again.');
            }
        }

        // Load reviews on page load
        document.addEventListener('DOMContentLoaded', loadReviews);
    </script>
}
